<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ToDo Application</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        #task-list {
            margin-top: 20px;
        }
        .task {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            border: 1px solid #ccc;
            margin-bottom: 10px;
        }
        .task-title {
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>ToDo List</h1>
    <form id="task-form">
        <input type="text" id="task-title" placeholder="Task Title" required>
        <textarea id="task-description" placeholder="Task Description" required></textarea>
        <button type="submit">Create Task</button>
    </form>

    <div id="task-list">
        <h2>Your Tasks</h2>
        <div id="tasks">
            <!-- Tasks will be dynamically populated here -->
        </div>
    </div>

    <script>
        // Function to fetch and display tasks
        async function fetchTasks() {
            try {
                const response = await fetch('/api/tasks'); // API call to get tasks
                const tasks = await response.json();
                const tasksContainer = document.getElementById('tasks');
                tasksContainer.innerHTML = ''; // Clear previous tasks

                tasks.forEach(task => {
                    const taskDiv = document.createElement('div');
                    taskDiv.classList.add('task');
                    taskDiv.innerHTML = `
                        <span class="task-title">${task.title}</span>
                        <span>${task.description}</span>
                        <button onclick="deleteTask('${task.id}')">Delete</button>
                    `;
                    tasksContainer.appendChild(taskDiv);
                });
            } catch (error) {
                console.error('Error fetching tasks:', error);
            }
        }

        // Function to create a new task
        document.getElementById('task-form').addEventListener('submit', async (event) => {
            event.preventDefault();
            const title = document.getElementById('task-title').value;
            const description = document.getElementById('task-description').value;

            try {
                await fetch('/api/tasks', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ title, description }) // API call to create a task
                });
                fetchTasks(); // Refresh task list
                document.getElementById('task-form').reset(); // Clear form
            } catch (error) {
                console.error('Error creating task:', error);
            }
        });

        // Function to delete a task
        async function deleteTask(id) {
            try {
                await fetch(`/api/tasks/${id}`, { method: 'DELETE' }); // API call to delete a task
                fetchTasks(); // Refresh task list
            } catch (error) {
                console.error('Error deleting task:', error);
            }
        }

        // Initial fetch to display tasks
        fetchTasks();
    </script>
</body>
</html>
